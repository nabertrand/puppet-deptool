#!/usr/bin/env ruby

require 'optparse'
require 'puppet-deptool'

# Default options
options = {}
options[:modules] = []
options[:recurse] = false
options[:restrict_scan] = false
options[:scan_modules] = []
options[:moduledir] = options[:envdir] = Dir.pwd
options[:modulepath] = []
options[:use_env_modulepath] = false
options[:list_dependencies] = false
options[:state_file] = '.deptool/state'
options[:use_generated_state] = false
options[:rescan_listed_modules] = false
options[:generate_state_file] = false
options[:known_warnings_file] = '.deptool/known_warnings'
options[:generate_warnings_file] = false
options[:update_metadata] = false
options[:warnings_ok] = false
options[:verbose] = false
options[:debug] = false
options[:quiet] = false

# Set some defaults based on current directory being control repo or module
#TODO


optparser = OptionParser.new do |opts|
  opts.on('-m', '--module MODULE', 'Resolve dependenecies of MODULE. Can be specified multiple times.') do |mod|
    options[:modules] << mod
  end
  opts.on('-R', '--recurse', 'Recursively determine module dependencies. Defaults to false.') do
    options[:recurse] = true
  end
  opts.on('-r', '--restrict', 'Restrict scanned modules to modules specified with --module. Default false.') do
    options[:restrict_scan] = true
  end
  opts.on('-s', '--scan MODULE', 'Add MODULE to list of modules to scan. Defaults to scan all modules if not specified.') do |scan|
    options[:scan_modules] << scan
  end
  opts.on('-e', '--envdir DIR', 'Set environment root directory to DIR. Defaults to current directory.') do |envdir|
    unless Dir.exist? envdir
      warn "envdir #{envdir} does not exist"
      exit 1
    end
    options[:envdir] = File.expand_path(envdir)
  end
  opts.on('-p', '--modulepath DIR', 'Set environment modulepath. Can be specified multiple times. Defaults to environment.conf modulepath.') do |modulepath|
    unless Dir.exist? modulepath
      warn "modulepath #{modulepath} does not exist"
      exit 1
    end
    options[:modulepath] << File.expand_path(modulepath)
  end
  opts.on('-P', '--use-env-modulepath', 'Prepend module paths specified with --modulepath to modulepath in environment.conf') do
    options[:use_env_modulepath] = true
  end
  opts.on('-l', '--list-deps', 'Print resolved dependencies.') do
    options[:list_dependencies] = true
  end
  opts.on('-f', '--state-file FILE', 'Path to file containing parsed state. Defaults to .deptool/state.') do |path|
    options[:state_file] = path
  end
  opts.on('-u', '--use-generated-state', 'Use generated state file instead of scanning. Defaults to false.') do
    options[:use_generated_state] = true
  end
  opts.on('-S', '--rescan-listed-modules', 'Use generated state file but also rescan modules specified with --scan. Implies --use-generated-state. Defaults to false.') do
    options[:rescan_listed_modules] = options[:use_generated_state] = true
  end
  opts.on('-g', '--generate-state-file', 'Generate state file.') do
    options[:generate_state_file] = true
  end
  opts.on('-k', '--known-warnings FILE', 'Path to file containing known warnings to ignore. Defaults to .deptool/known_warnings.') do |path|
    options[:known_warnings_file] = path
  end
  opts.on('-G', '--generate-warnings-file', 'Generate known warnings file for all current warnings.') do
    options[:generate_warnings_file] = true
  end
  opts.on('-M', '--update-metadata', 'Update metadata.json with resolved dependencies. Defaults to false.') do
    options[:update_metadata] = true
  end
  opts.on('-w', '--warnings-ok', 'Return 0 exit code even if there are warnings. Defaults to false.') do
    options[:warnings_ok] = true
  end
  opts.on('-v', '--verbose', 'Enable verbose output.') do
    options[:verbose] = true
  end
  opts.on('-d', '--debug', 'Enable debug output.') do
    options[:debug] = true
  end
  opts.on('-q', '--quiet', 'Disable warning output.') do
    options[:quiet] = true
  end
end

begin
  optparser.parse!
rescue => e
  warn e
  puts optparser
  exit 1
end

unless ARGV.empty?
  warn "unknown arguments: #{ARGV.join(', ')}"
  puts optparser
  exit 1
end

parser = PuppetDeptool.parser(options)
parser.info "Parsed options:\n#{options.pretty_inspect}"
parser.scan
parser.resolve
parser.list_dependencies if options[:list_dependencies]
parser.generate_known_warnings if options[:generate_warnings_file]
parser.generate_state if options[:generate_state_file]
parser.update_metadata if options[:update_metadata]
exit 1 if parser.warnings_encountered && options[:warnings_ok] == false
